// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

package org.apache.flink.pb3.canal.entity;

/**
 * <pre>
 **数据包格式*
 * </pre>
 *
 * Protobuf type {@code com.alibaba.otter.canal.protocol.RowData}
 */
public final class RowData extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.alibaba.otter.canal.protocol.RowData)
    RowDataOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RowData.newBuilder() to construct.
  private RowData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RowData() {
    afterColumns_ = java.util.Collections.emptyList();
    beforeColumns_ = java.util.Collections.emptyList();
    pros_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RowData();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private RowData(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              beforeColumns_ = new java.util.ArrayList<org.apache.flink.pb3.canal.entity.Column>();
              mutable_bitField0_ |= 0x00000002;
            }
            beforeColumns_.add(
                input.readMessage(org.apache.flink.pb3.canal.entity.Column.parser(), extensionRegistry));
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              afterColumns_ = new java.util.ArrayList<org.apache.flink.pb3.canal.entity.Column>();
              mutable_bitField0_ |= 0x00000001;
            }
            afterColumns_.add(
                input.readMessage(org.apache.flink.pb3.canal.entity.Column.parser(), extensionRegistry));
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              pros_ = new java.util.ArrayList<org.apache.flink.pb3.canal.entity.Pair>();
              mutable_bitField0_ |= 0x00000004;
            }
            pros_.add(
                input.readMessage(org.apache.flink.pb3.canal.entity.Pair.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        beforeColumns_ = java.util.Collections.unmodifiableList(beforeColumns_);
      }
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        afterColumns_ = java.util.Collections.unmodifiableList(afterColumns_);
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        pros_ = java.util.Collections.unmodifiableList(pros_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.flink.pb3.canal.entity.MessageOuterClass.internal_static_com_alibaba_otter_canal_protocol_RowData_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.flink.pb3.canal.entity.MessageOuterClass.internal_static_com_alibaba_otter_canal_protocol_RowData_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.flink.pb3.canal.entity.RowData.class, org.apache.flink.pb3.canal.entity.RowData.Builder.class);
  }

  public static final int AFTERCOLUMNS_FIELD_NUMBER = 2;
  private java.util.List<org.apache.flink.pb3.canal.entity.Column> afterColumns_;
  /**
   * <pre>
   **字段信息，增量数据(修改后，新增后)*
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
   */
  @java.lang.Override
  public java.util.List<org.apache.flink.pb3.canal.entity.Column> getAfterColumnsList() {
    return afterColumns_;
  }
  /**
   * <pre>
   **字段信息，增量数据(修改后，新增后)*
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends org.apache.flink.pb3.canal.entity.ColumnOrBuilder> 
      getAfterColumnsOrBuilderList() {
    return afterColumns_;
  }
  /**
   * <pre>
   **字段信息，增量数据(修改后，新增后)*
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
   */
  @java.lang.Override
  public int getAfterColumnsCount() {
    return afterColumns_.size();
  }
  /**
   * <pre>
   **字段信息，增量数据(修改后，新增后)*
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
   */
  @java.lang.Override
  public org.apache.flink.pb3.canal.entity.Column getAfterColumns(int index) {
    return afterColumns_.get(index);
  }
  /**
   * <pre>
   **字段信息，增量数据(修改后，新增后)*
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
   */
  @java.lang.Override
  public org.apache.flink.pb3.canal.entity.ColumnOrBuilder getAfterColumnsOrBuilder(
      int index) {
    return afterColumns_.get(index);
  }

  public static final int BEFORECOLUMNS_FIELD_NUMBER = 1;
  private java.util.List<org.apache.flink.pb3.canal.entity.Column> beforeColumns_;
  /**
   * <pre>
   **changelog insert,delete,*
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
   */
  @java.lang.Override
  public java.util.List<org.apache.flink.pb3.canal.entity.Column> getBeforeColumnsList() {
    return beforeColumns_;
  }
  /**
   * <pre>
   **changelog insert,delete,*
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends org.apache.flink.pb3.canal.entity.ColumnOrBuilder> 
      getBeforeColumnsOrBuilderList() {
    return beforeColumns_;
  }
  /**
   * <pre>
   **changelog insert,delete,*
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
   */
  @java.lang.Override
  public int getBeforeColumnsCount() {
    return beforeColumns_.size();
  }
  /**
   * <pre>
   **changelog insert,delete,*
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
   */
  @java.lang.Override
  public org.apache.flink.pb3.canal.entity.Column getBeforeColumns(int index) {
    return beforeColumns_.get(index);
  }
  /**
   * <pre>
   **changelog insert,delete,*
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
   */
  @java.lang.Override
  public org.apache.flink.pb3.canal.entity.ColumnOrBuilder getBeforeColumnsOrBuilder(
      int index) {
    return beforeColumns_.get(index);
  }

  public static final int PROS_FIELD_NUMBER = 3;
  private java.util.List<org.apache.flink.pb3.canal.entity.Pair> pros_;
  /**
   * <pre>
   **预留拓展 *
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
   */
  @java.lang.Override
  public java.util.List<org.apache.flink.pb3.canal.entity.Pair> getProsList() {
    return pros_;
  }
  /**
   * <pre>
   **预留拓展 *
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends org.apache.flink.pb3.canal.entity.PairOrBuilder> 
      getProsOrBuilderList() {
    return pros_;
  }
  /**
   * <pre>
   **预留拓展 *
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
   */
  @java.lang.Override
  public int getProsCount() {
    return pros_.size();
  }
  /**
   * <pre>
   **预留拓展 *
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
   */
  @java.lang.Override
  public org.apache.flink.pb3.canal.entity.Pair getPros(int index) {
    return pros_.get(index);
  }
  /**
   * <pre>
   **预留拓展 *
   * </pre>
   *
   * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
   */
  @java.lang.Override
  public org.apache.flink.pb3.canal.entity.PairOrBuilder getProsOrBuilder(
      int index) {
    return pros_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < beforeColumns_.size(); i++) {
      output.writeMessage(1, beforeColumns_.get(i));
    }
    for (int i = 0; i < afterColumns_.size(); i++) {
      output.writeMessage(2, afterColumns_.get(i));
    }
    for (int i = 0; i < pros_.size(); i++) {
      output.writeMessage(3, pros_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < beforeColumns_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, beforeColumns_.get(i));
    }
    for (int i = 0; i < afterColumns_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, afterColumns_.get(i));
    }
    for (int i = 0; i < pros_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, pros_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.flink.pb3.canal.entity.RowData)) {
      return super.equals(obj);
    }
    org.apache.flink.pb3.canal.entity.RowData other = (org.apache.flink.pb3.canal.entity.RowData) obj;

    if (!getAfterColumnsList()
        .equals(other.getAfterColumnsList())) return false;
    if (!getBeforeColumnsList()
        .equals(other.getBeforeColumnsList())) return false;
    if (!getProsList()
        .equals(other.getProsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getAfterColumnsCount() > 0) {
      hash = (37 * hash) + AFTERCOLUMNS_FIELD_NUMBER;
      hash = (53 * hash) + getAfterColumnsList().hashCode();
    }
    if (getBeforeColumnsCount() > 0) {
      hash = (37 * hash) + BEFORECOLUMNS_FIELD_NUMBER;
      hash = (53 * hash) + getBeforeColumnsList().hashCode();
    }
    if (getProsCount() > 0) {
      hash = (37 * hash) + PROS_FIELD_NUMBER;
      hash = (53 * hash) + getProsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.flink.pb3.canal.entity.RowData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.flink.pb3.canal.entity.RowData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.flink.pb3.canal.entity.RowData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.flink.pb3.canal.entity.RowData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.flink.pb3.canal.entity.RowData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.flink.pb3.canal.entity.RowData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.flink.pb3.canal.entity.RowData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.flink.pb3.canal.entity.RowData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.flink.pb3.canal.entity.RowData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.apache.flink.pb3.canal.entity.RowData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.flink.pb3.canal.entity.RowData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.flink.pb3.canal.entity.RowData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.flink.pb3.canal.entity.RowData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   **数据包格式*
   * </pre>
   *
   * Protobuf type {@code com.alibaba.otter.canal.protocol.RowData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.alibaba.otter.canal.protocol.RowData)
      org.apache.flink.pb3.canal.entity.RowDataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.pb3.canal.entity.MessageOuterClass.internal_static_com_alibaba_otter_canal_protocol_RowData_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.pb3.canal.entity.MessageOuterClass.internal_static_com_alibaba_otter_canal_protocol_RowData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.pb3.canal.entity.RowData.class, org.apache.flink.pb3.canal.entity.RowData.Builder.class);
    }

    // Construct using org.apache.flink.pb3.canal.entity.RowData.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getAfterColumnsFieldBuilder();
        getBeforeColumnsFieldBuilder();
        getProsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (afterColumnsBuilder_ == null) {
        afterColumns_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        afterColumnsBuilder_.clear();
      }
      if (beforeColumnsBuilder_ == null) {
        beforeColumns_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        beforeColumnsBuilder_.clear();
      }
      if (prosBuilder_ == null) {
        pros_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        prosBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.flink.pb3.canal.entity.MessageOuterClass.internal_static_com_alibaba_otter_canal_protocol_RowData_descriptor;
    }

    @java.lang.Override
    public org.apache.flink.pb3.canal.entity.RowData getDefaultInstanceForType() {
      return org.apache.flink.pb3.canal.entity.RowData.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.flink.pb3.canal.entity.RowData build() {
      org.apache.flink.pb3.canal.entity.RowData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.flink.pb3.canal.entity.RowData buildPartial() {
      org.apache.flink.pb3.canal.entity.RowData result = new org.apache.flink.pb3.canal.entity.RowData(this);
      int from_bitField0_ = bitField0_;
      if (afterColumnsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          afterColumns_ = java.util.Collections.unmodifiableList(afterColumns_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.afterColumns_ = afterColumns_;
      } else {
        result.afterColumns_ = afterColumnsBuilder_.build();
      }
      if (beforeColumnsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          beforeColumns_ = java.util.Collections.unmodifiableList(beforeColumns_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.beforeColumns_ = beforeColumns_;
      } else {
        result.beforeColumns_ = beforeColumnsBuilder_.build();
      }
      if (prosBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          pros_ = java.util.Collections.unmodifiableList(pros_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.pros_ = pros_;
      } else {
        result.pros_ = prosBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.flink.pb3.canal.entity.RowData) {
        return mergeFrom((org.apache.flink.pb3.canal.entity.RowData)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.flink.pb3.canal.entity.RowData other) {
      if (other == org.apache.flink.pb3.canal.entity.RowData.getDefaultInstance()) return this;
      if (afterColumnsBuilder_ == null) {
        if (!other.afterColumns_.isEmpty()) {
          if (afterColumns_.isEmpty()) {
            afterColumns_ = other.afterColumns_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAfterColumnsIsMutable();
            afterColumns_.addAll(other.afterColumns_);
          }
          onChanged();
        }
      } else {
        if (!other.afterColumns_.isEmpty()) {
          if (afterColumnsBuilder_.isEmpty()) {
            afterColumnsBuilder_.dispose();
            afterColumnsBuilder_ = null;
            afterColumns_ = other.afterColumns_;
            bitField0_ = (bitField0_ & ~0x00000001);
            afterColumnsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAfterColumnsFieldBuilder() : null;
          } else {
            afterColumnsBuilder_.addAllMessages(other.afterColumns_);
          }
        }
      }
      if (beforeColumnsBuilder_ == null) {
        if (!other.beforeColumns_.isEmpty()) {
          if (beforeColumns_.isEmpty()) {
            beforeColumns_ = other.beforeColumns_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBeforeColumnsIsMutable();
            beforeColumns_.addAll(other.beforeColumns_);
          }
          onChanged();
        }
      } else {
        if (!other.beforeColumns_.isEmpty()) {
          if (beforeColumnsBuilder_.isEmpty()) {
            beforeColumnsBuilder_.dispose();
            beforeColumnsBuilder_ = null;
            beforeColumns_ = other.beforeColumns_;
            bitField0_ = (bitField0_ & ~0x00000002);
            beforeColumnsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getBeforeColumnsFieldBuilder() : null;
          } else {
            beforeColumnsBuilder_.addAllMessages(other.beforeColumns_);
          }
        }
      }
      if (prosBuilder_ == null) {
        if (!other.pros_.isEmpty()) {
          if (pros_.isEmpty()) {
            pros_ = other.pros_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureProsIsMutable();
            pros_.addAll(other.pros_);
          }
          onChanged();
        }
      } else {
        if (!other.pros_.isEmpty()) {
          if (prosBuilder_.isEmpty()) {
            prosBuilder_.dispose();
            prosBuilder_ = null;
            pros_ = other.pros_;
            bitField0_ = (bitField0_ & ~0x00000004);
            prosBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getProsFieldBuilder() : null;
          } else {
            prosBuilder_.addAllMessages(other.pros_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.apache.flink.pb3.canal.entity.RowData parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.apache.flink.pb3.canal.entity.RowData) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<org.apache.flink.pb3.canal.entity.Column> afterColumns_ =
      java.util.Collections.emptyList();
    private void ensureAfterColumnsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        afterColumns_ = new java.util.ArrayList<org.apache.flink.pb3.canal.entity.Column>(afterColumns_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.flink.pb3.canal.entity.Column, org.apache.flink.pb3.canal.entity.Column.Builder, org.apache.flink.pb3.canal.entity.ColumnOrBuilder> afterColumnsBuilder_;

    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public java.util.List<org.apache.flink.pb3.canal.entity.Column> getAfterColumnsList() {
      if (afterColumnsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(afterColumns_);
      } else {
        return afterColumnsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public int getAfterColumnsCount() {
      if (afterColumnsBuilder_ == null) {
        return afterColumns_.size();
      } else {
        return afterColumnsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public org.apache.flink.pb3.canal.entity.Column getAfterColumns(int index) {
      if (afterColumnsBuilder_ == null) {
        return afterColumns_.get(index);
      } else {
        return afterColumnsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public Builder setAfterColumns(
        int index, org.apache.flink.pb3.canal.entity.Column value) {
      if (afterColumnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAfterColumnsIsMutable();
        afterColumns_.set(index, value);
        onChanged();
      } else {
        afterColumnsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public Builder setAfterColumns(
        int index, org.apache.flink.pb3.canal.entity.Column.Builder builderForValue) {
      if (afterColumnsBuilder_ == null) {
        ensureAfterColumnsIsMutable();
        afterColumns_.set(index, builderForValue.build());
        onChanged();
      } else {
        afterColumnsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public Builder addAfterColumns(org.apache.flink.pb3.canal.entity.Column value) {
      if (afterColumnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAfterColumnsIsMutable();
        afterColumns_.add(value);
        onChanged();
      } else {
        afterColumnsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public Builder addAfterColumns(
        int index, org.apache.flink.pb3.canal.entity.Column value) {
      if (afterColumnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAfterColumnsIsMutable();
        afterColumns_.add(index, value);
        onChanged();
      } else {
        afterColumnsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public Builder addAfterColumns(
        org.apache.flink.pb3.canal.entity.Column.Builder builderForValue) {
      if (afterColumnsBuilder_ == null) {
        ensureAfterColumnsIsMutable();
        afterColumns_.add(builderForValue.build());
        onChanged();
      } else {
        afterColumnsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public Builder addAfterColumns(
        int index, org.apache.flink.pb3.canal.entity.Column.Builder builderForValue) {
      if (afterColumnsBuilder_ == null) {
        ensureAfterColumnsIsMutable();
        afterColumns_.add(index, builderForValue.build());
        onChanged();
      } else {
        afterColumnsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public Builder addAllAfterColumns(
        java.lang.Iterable<? extends org.apache.flink.pb3.canal.entity.Column> values) {
      if (afterColumnsBuilder_ == null) {
        ensureAfterColumnsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, afterColumns_);
        onChanged();
      } else {
        afterColumnsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public Builder clearAfterColumns() {
      if (afterColumnsBuilder_ == null) {
        afterColumns_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        afterColumnsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public Builder removeAfterColumns(int index) {
      if (afterColumnsBuilder_ == null) {
        ensureAfterColumnsIsMutable();
        afterColumns_.remove(index);
        onChanged();
      } else {
        afterColumnsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public org.apache.flink.pb3.canal.entity.Column.Builder getAfterColumnsBuilder(
        int index) {
      return getAfterColumnsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public org.apache.flink.pb3.canal.entity.ColumnOrBuilder getAfterColumnsOrBuilder(
        int index) {
      if (afterColumnsBuilder_ == null) {
        return afterColumns_.get(index);  } else {
        return afterColumnsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public java.util.List<? extends org.apache.flink.pb3.canal.entity.ColumnOrBuilder> 
         getAfterColumnsOrBuilderList() {
      if (afterColumnsBuilder_ != null) {
        return afterColumnsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(afterColumns_);
      }
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public org.apache.flink.pb3.canal.entity.Column.Builder addAfterColumnsBuilder() {
      return getAfterColumnsFieldBuilder().addBuilder(
          org.apache.flink.pb3.canal.entity.Column.getDefaultInstance());
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public org.apache.flink.pb3.canal.entity.Column.Builder addAfterColumnsBuilder(
        int index) {
      return getAfterColumnsFieldBuilder().addBuilder(
          index, org.apache.flink.pb3.canal.entity.Column.getDefaultInstance());
    }
    /**
     * <pre>
     **字段信息，增量数据(修改后，新增后)*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;</code>
     */
    public java.util.List<org.apache.flink.pb3.canal.entity.Column.Builder> 
         getAfterColumnsBuilderList() {
      return getAfterColumnsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.flink.pb3.canal.entity.Column, org.apache.flink.pb3.canal.entity.Column.Builder, org.apache.flink.pb3.canal.entity.ColumnOrBuilder> 
        getAfterColumnsFieldBuilder() {
      if (afterColumnsBuilder_ == null) {
        afterColumnsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.flink.pb3.canal.entity.Column, org.apache.flink.pb3.canal.entity.Column.Builder, org.apache.flink.pb3.canal.entity.ColumnOrBuilder>(
                afterColumns_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        afterColumns_ = null;
      }
      return afterColumnsBuilder_;
    }

    private java.util.List<org.apache.flink.pb3.canal.entity.Column> beforeColumns_ =
      java.util.Collections.emptyList();
    private void ensureBeforeColumnsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        beforeColumns_ = new java.util.ArrayList<org.apache.flink.pb3.canal.entity.Column>(beforeColumns_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.flink.pb3.canal.entity.Column, org.apache.flink.pb3.canal.entity.Column.Builder, org.apache.flink.pb3.canal.entity.ColumnOrBuilder> beforeColumnsBuilder_;

    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public java.util.List<org.apache.flink.pb3.canal.entity.Column> getBeforeColumnsList() {
      if (beforeColumnsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(beforeColumns_);
      } else {
        return beforeColumnsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public int getBeforeColumnsCount() {
      if (beforeColumnsBuilder_ == null) {
        return beforeColumns_.size();
      } else {
        return beforeColumnsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public org.apache.flink.pb3.canal.entity.Column getBeforeColumns(int index) {
      if (beforeColumnsBuilder_ == null) {
        return beforeColumns_.get(index);
      } else {
        return beforeColumnsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public Builder setBeforeColumns(
        int index, org.apache.flink.pb3.canal.entity.Column value) {
      if (beforeColumnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBeforeColumnsIsMutable();
        beforeColumns_.set(index, value);
        onChanged();
      } else {
        beforeColumnsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public Builder setBeforeColumns(
        int index, org.apache.flink.pb3.canal.entity.Column.Builder builderForValue) {
      if (beforeColumnsBuilder_ == null) {
        ensureBeforeColumnsIsMutable();
        beforeColumns_.set(index, builderForValue.build());
        onChanged();
      } else {
        beforeColumnsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public Builder addBeforeColumns(org.apache.flink.pb3.canal.entity.Column value) {
      if (beforeColumnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBeforeColumnsIsMutable();
        beforeColumns_.add(value);
        onChanged();
      } else {
        beforeColumnsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public Builder addBeforeColumns(
        int index, org.apache.flink.pb3.canal.entity.Column value) {
      if (beforeColumnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBeforeColumnsIsMutable();
        beforeColumns_.add(index, value);
        onChanged();
      } else {
        beforeColumnsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public Builder addBeforeColumns(
        org.apache.flink.pb3.canal.entity.Column.Builder builderForValue) {
      if (beforeColumnsBuilder_ == null) {
        ensureBeforeColumnsIsMutable();
        beforeColumns_.add(builderForValue.build());
        onChanged();
      } else {
        beforeColumnsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public Builder addBeforeColumns(
        int index, org.apache.flink.pb3.canal.entity.Column.Builder builderForValue) {
      if (beforeColumnsBuilder_ == null) {
        ensureBeforeColumnsIsMutable();
        beforeColumns_.add(index, builderForValue.build());
        onChanged();
      } else {
        beforeColumnsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public Builder addAllBeforeColumns(
        java.lang.Iterable<? extends org.apache.flink.pb3.canal.entity.Column> values) {
      if (beforeColumnsBuilder_ == null) {
        ensureBeforeColumnsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, beforeColumns_);
        onChanged();
      } else {
        beforeColumnsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public Builder clearBeforeColumns() {
      if (beforeColumnsBuilder_ == null) {
        beforeColumns_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        beforeColumnsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public Builder removeBeforeColumns(int index) {
      if (beforeColumnsBuilder_ == null) {
        ensureBeforeColumnsIsMutable();
        beforeColumns_.remove(index);
        onChanged();
      } else {
        beforeColumnsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public org.apache.flink.pb3.canal.entity.Column.Builder getBeforeColumnsBuilder(
        int index) {
      return getBeforeColumnsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public org.apache.flink.pb3.canal.entity.ColumnOrBuilder getBeforeColumnsOrBuilder(
        int index) {
      if (beforeColumnsBuilder_ == null) {
        return beforeColumns_.get(index);  } else {
        return beforeColumnsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public java.util.List<? extends org.apache.flink.pb3.canal.entity.ColumnOrBuilder> 
         getBeforeColumnsOrBuilderList() {
      if (beforeColumnsBuilder_ != null) {
        return beforeColumnsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(beforeColumns_);
      }
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public org.apache.flink.pb3.canal.entity.Column.Builder addBeforeColumnsBuilder() {
      return getBeforeColumnsFieldBuilder().addBuilder(
          org.apache.flink.pb3.canal.entity.Column.getDefaultInstance());
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public org.apache.flink.pb3.canal.entity.Column.Builder addBeforeColumnsBuilder(
        int index) {
      return getBeforeColumnsFieldBuilder().addBuilder(
          index, org.apache.flink.pb3.canal.entity.Column.getDefaultInstance());
    }
    /**
     * <pre>
     **changelog insert,delete,*
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;</code>
     */
    public java.util.List<org.apache.flink.pb3.canal.entity.Column.Builder> 
         getBeforeColumnsBuilderList() {
      return getBeforeColumnsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.flink.pb3.canal.entity.Column, org.apache.flink.pb3.canal.entity.Column.Builder, org.apache.flink.pb3.canal.entity.ColumnOrBuilder> 
        getBeforeColumnsFieldBuilder() {
      if (beforeColumnsBuilder_ == null) {
        beforeColumnsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.flink.pb3.canal.entity.Column, org.apache.flink.pb3.canal.entity.Column.Builder, org.apache.flink.pb3.canal.entity.ColumnOrBuilder>(
                beforeColumns_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        beforeColumns_ = null;
      }
      return beforeColumnsBuilder_;
    }

    private java.util.List<org.apache.flink.pb3.canal.entity.Pair> pros_ =
      java.util.Collections.emptyList();
    private void ensureProsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        pros_ = new java.util.ArrayList<org.apache.flink.pb3.canal.entity.Pair>(pros_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.flink.pb3.canal.entity.Pair, org.apache.flink.pb3.canal.entity.Pair.Builder, org.apache.flink.pb3.canal.entity.PairOrBuilder> prosBuilder_;

    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public java.util.List<org.apache.flink.pb3.canal.entity.Pair> getProsList() {
      if (prosBuilder_ == null) {
        return java.util.Collections.unmodifiableList(pros_);
      } else {
        return prosBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public int getProsCount() {
      if (prosBuilder_ == null) {
        return pros_.size();
      } else {
        return prosBuilder_.getCount();
      }
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public org.apache.flink.pb3.canal.entity.Pair getPros(int index) {
      if (prosBuilder_ == null) {
        return pros_.get(index);
      } else {
        return prosBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public Builder setPros(
        int index, org.apache.flink.pb3.canal.entity.Pair value) {
      if (prosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProsIsMutable();
        pros_.set(index, value);
        onChanged();
      } else {
        prosBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public Builder setPros(
        int index, org.apache.flink.pb3.canal.entity.Pair.Builder builderForValue) {
      if (prosBuilder_ == null) {
        ensureProsIsMutable();
        pros_.set(index, builderForValue.build());
        onChanged();
      } else {
        prosBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public Builder addPros(org.apache.flink.pb3.canal.entity.Pair value) {
      if (prosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProsIsMutable();
        pros_.add(value);
        onChanged();
      } else {
        prosBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public Builder addPros(
        int index, org.apache.flink.pb3.canal.entity.Pair value) {
      if (prosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProsIsMutable();
        pros_.add(index, value);
        onChanged();
      } else {
        prosBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public Builder addPros(
        org.apache.flink.pb3.canal.entity.Pair.Builder builderForValue) {
      if (prosBuilder_ == null) {
        ensureProsIsMutable();
        pros_.add(builderForValue.build());
        onChanged();
      } else {
        prosBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public Builder addPros(
        int index, org.apache.flink.pb3.canal.entity.Pair.Builder builderForValue) {
      if (prosBuilder_ == null) {
        ensureProsIsMutable();
        pros_.add(index, builderForValue.build());
        onChanged();
      } else {
        prosBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public Builder addAllPros(
        java.lang.Iterable<? extends org.apache.flink.pb3.canal.entity.Pair> values) {
      if (prosBuilder_ == null) {
        ensureProsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pros_);
        onChanged();
      } else {
        prosBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public Builder clearPros() {
      if (prosBuilder_ == null) {
        pros_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        prosBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public Builder removePros(int index) {
      if (prosBuilder_ == null) {
        ensureProsIsMutable();
        pros_.remove(index);
        onChanged();
      } else {
        prosBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public org.apache.flink.pb3.canal.entity.Pair.Builder getProsBuilder(
        int index) {
      return getProsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public org.apache.flink.pb3.canal.entity.PairOrBuilder getProsOrBuilder(
        int index) {
      if (prosBuilder_ == null) {
        return pros_.get(index);  } else {
        return prosBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public java.util.List<? extends org.apache.flink.pb3.canal.entity.PairOrBuilder> 
         getProsOrBuilderList() {
      if (prosBuilder_ != null) {
        return prosBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(pros_);
      }
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public org.apache.flink.pb3.canal.entity.Pair.Builder addProsBuilder() {
      return getProsFieldBuilder().addBuilder(
          org.apache.flink.pb3.canal.entity.Pair.getDefaultInstance());
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public org.apache.flink.pb3.canal.entity.Pair.Builder addProsBuilder(
        int index) {
      return getProsFieldBuilder().addBuilder(
          index, org.apache.flink.pb3.canal.entity.Pair.getDefaultInstance());
    }
    /**
     * <pre>
     **预留拓展 *
     * </pre>
     *
     * <code>repeated .com.alibaba.otter.canal.protocol.Pair pros = 3;</code>
     */
    public java.util.List<org.apache.flink.pb3.canal.entity.Pair.Builder> 
         getProsBuilderList() {
      return getProsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.flink.pb3.canal.entity.Pair, org.apache.flink.pb3.canal.entity.Pair.Builder, org.apache.flink.pb3.canal.entity.PairOrBuilder> 
        getProsFieldBuilder() {
      if (prosBuilder_ == null) {
        prosBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.flink.pb3.canal.entity.Pair, org.apache.flink.pb3.canal.entity.Pair.Builder, org.apache.flink.pb3.canal.entity.PairOrBuilder>(
                pros_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        pros_ = null;
      }
      return prosBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:com.alibaba.otter.canal.protocol.RowData)
  }

  // @@protoc_insertion_point(class_scope:com.alibaba.otter.canal.protocol.RowData)
  private static final org.apache.flink.pb3.canal.entity.RowData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.flink.pb3.canal.entity.RowData();
  }

  public static org.apache.flink.pb3.canal.entity.RowData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RowData>
      PARSER = new com.google.protobuf.AbstractParser<RowData>() {
    @java.lang.Override
    public RowData parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new RowData(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<RowData> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RowData> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.flink.pb3.canal.entity.RowData getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

